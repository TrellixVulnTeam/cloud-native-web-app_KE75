import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as validate_store, p as component_subscribe, v as validate_slots, r as featureTogglesStore, u as create_slot, w as update_slot, x as transition_in, y as transition_out, z as empty, l as insert_dev, A as group_outros, B as check_outros, b as detach_dev, F as FEATURE_TOGGLES, a as space, e as element, t as text, C as create_component, q as query_selector_all, c as claim_space, f as claim_element, g as children, h as claim_text, D as claim_component, k as add_location, m as append_dev, E as mount_component, G as destroy_component } from './client.82bec880.js';

/* src/components/feature-toggle.svelte generated by Svelte v3.32.1 */

// (5:0) {#if $featureTogglesStore[name]}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(5:0) {#if $featureTogglesStore[name]}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$featureTogglesStore*/ ctx[1][/*name*/ ctx[0]] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*$featureTogglesStore*/ ctx[1][/*name*/ ctx[0]]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$featureTogglesStore, name*/ 3) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $featureTogglesStore;
	validate_store(featureTogglesStore, "featureTogglesStore");
	component_subscribe($$self, featureTogglesStore, $$value => $$invalidate(1, $featureTogglesStore = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Feature_toggle", slots, ['default']);
	let { name } = $$props;
	const writable_props = ["name"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Feature_toggle> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		featureTogglesStore,
		name,
		$featureTogglesStore
	});

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, $featureTogglesStore, $$scope, slots];
}

class Feature_toggle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Feature_toggle",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Feature_toggle> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Feature_toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Feature_toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/about.svelte generated by Svelte v3.32.1 */
const file = "src/routes/about.svelte";

// (14:0) <FeatureToggle name={FEATURE_TOGGLES.vipWelcome.name}>
function create_default_slot(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Some people see this, others don't!");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Some people see this, others don't!");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 14, 2, 335);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(14:0) <FeatureToggle name={FEATURE_TOGGLES.vipWelcome.name}>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let featuretoggle;
	let current;

	featuretoggle = new Feature_toggle({
			props: {
				name: FEATURE_TOGGLES.vipWelcome.name,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("About this site");
			t2 = space();
			p = element("p");
			t3 = text("This is the 'about' page. There's not much here.");
			t4 = space();
			create_component(featuretoggle.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "About this site");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "This is the 'about' page. There's not much here.");
			p_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(featuretoggle.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			add_location(h1, file, 9, 0, 195);
			add_location(p, file, 11, 0, 221);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			mount_component(featuretoggle, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const featuretoggle_changes = {};

			if (dirty & /*$$scope*/ 1) {
				featuretoggle_changes.$$scope = { dirty, ctx };
			}

			featuretoggle.$set(featuretoggle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(featuretoggle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(featuretoggle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t4);
			destroy_component(featuretoggle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("About", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ FeatureToggle: Feature_toggle, FEATURE_TOGGLES });
	return [];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment$1.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQuMTBkMTYzM2EuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZlYXR1cmUtdG9nZ2xlLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYWJvdXQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGZlYXR1cmVUb2dnbGVzU3RvcmUgfSBmcm9tIFwiLi4vZmVhdHVyZS10b2dnbGVzL3N0b3JlXCI7XG4gIGV4cG9ydCBsZXQgbmFtZTtcbjwvc2NyaXB0PlxueyNpZiAkZmVhdHVyZVRvZ2dsZXNTdG9yZVtuYW1lXX1cbiAgPHNsb3QgLz5cbnsvaWZ9XG5cbiIsIjxzY3JpcHQ+XG4gIGltcG9ydCBGZWF0dXJlVG9nZ2xlIGZyb20gXCIuLi9jb21wb25lbnRzL2ZlYXR1cmUtdG9nZ2xlLnN2ZWx0ZVwiO1xuICBpbXBvcnQgeyBGRUFUVVJFX1RPR0dMRVMgfSBmcm9tIFwiLi4vZmVhdHVyZS10b2dnbGVzXCI7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QWJvdXQ8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPkFib3V0IHRoaXMgc2l0ZTwvaDE+XG5cbjxwPlRoaXMgaXMgdGhlICdhYm91dCcgcGFnZS4gVGhlcmUncyBub3QgbXVjaCBoZXJlLjwvcD5cblxuPEZlYXR1cmVUb2dnbGUgbmFtZT17RkVBVFVSRV9UT0dHTEVTLnZpcFdlbGNvbWUubmFtZX0+XG4gIDxwPlNvbWUgcGVvcGxlIHNlZSB0aGlzLCBvdGhlcnMgZG9uJ3QhPC9wPlxuPC9GZWF0dXJlVG9nZ2xlPlxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUNBSUssR0FBb0IsYUFBQyxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7OztnQ0FBekIsR0FBb0IsYUFBQyxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BRmpCLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUNXSSxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
