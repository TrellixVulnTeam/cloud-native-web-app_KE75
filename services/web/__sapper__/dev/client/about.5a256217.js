import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, f as claim_element, g as children, c as claim_space, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, o as set_data_dev, n as noop, p as validate_store, r as featureTogglesStore, u as component_subscribe, w as create_slot, x as update_slot, y as transition_in, z as transition_out, A as empty, B as group_outros, C as check_outros, D as assign, F as FEATURE_TOGGLES, E as create_component, G as claim_component, q as query_selector_all, H as mount_component, I as get_spread_update, J as get_spread_object, K as destroy_component } from './client.12867b06.js';

/* src/components/contact-card.svelte generated by Svelte v3.32.1 */

const file = "src/components/contact-card.svelte";

function create_fragment(ctx) {
	let div4;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let h2;
	let t1;
	let t2;
	let div0;
	let t3;
	let t4;
	let div1;
	let t5;
	let t6;
	let div2;
	let t7;

	const block = {
		c: function create() {
			div4 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			h2 = element("h2");
			t1 = text(/*name*/ ctx[0]);
			t2 = space();
			div0 = element("div");
			t3 = text(/*job*/ ctx[2]);
			t4 = space();
			div1 = element("div");
			t5 = text(/*email*/ ctx[3]);
			t6 = space();
			div2 = element("div");
			t7 = text(/*phone*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			img = claim_element(div4_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			h2 = claim_element(div3_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, /*name*/ ctx[0]);
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t3 = claim_text(div0_nodes, /*job*/ ctx[2]);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t5 = claim_text(div1_nodes, /*email*/ ctx[3]);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t7 = claim_text(div2_nodes, /*phone*/ ctx[4]);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6");
			if (img.src !== (img_src_value = /*avatarSrc*/ ctx[1])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Avatar");
			add_location(img, file, 8, 2, 168);
			attr_dev(h2, "class", "text-lg");
			add_location(h2, file, 10, 4, 319);
			attr_dev(div0, "class", "text-purple-500");
			add_location(div0, file, 11, 4, 355);
			attr_dev(div1, "class", "text-gray-600");
			add_location(div1, file, 12, 4, 400);
			attr_dev(div2, "class", "text-gray-600");
			add_location(div2, file, 13, 4, 445);
			attr_dev(div3, "class", "text-center md:text-left");
			add_location(div3, file, 9, 2, 276);
			attr_dev(div4, "class", "md:flex bg-white rounded-lg p-6");
			add_location(div4, file, 7, 0, 120);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, img);
			append_dev(div4, t0);
			append_dev(div4, div3);
			append_dev(div3, h2);
			append_dev(h2, t1);
			append_dev(div3, t2);
			append_dev(div3, div0);
			append_dev(div0, t3);
			append_dev(div3, t4);
			append_dev(div3, div1);
			append_dev(div1, t5);
			append_dev(div3, t6);
			append_dev(div3, div2);
			append_dev(div2, t7);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*avatarSrc*/ 2 && img.src !== (img_src_value = /*avatarSrc*/ ctx[1])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
			if (dirty & /*job*/ 4) set_data_dev(t3, /*job*/ ctx[2]);
			if (dirty & /*email*/ 8) set_data_dev(t5, /*email*/ ctx[3]);
			if (dirty & /*phone*/ 16) set_data_dev(t7, /*phone*/ ctx[4]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Contact_card", slots, []);
	let { name } = $$props;
	let { avatarSrc } = $$props;
	let { job } = $$props;
	let { email } = $$props;
	let { phone } = $$props;
	const writable_props = ["name", "avatarSrc", "job", "email", "phone"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Contact_card> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("avatarSrc" in $$props) $$invalidate(1, avatarSrc = $$props.avatarSrc);
		if ("job" in $$props) $$invalidate(2, job = $$props.job);
		if ("email" in $$props) $$invalidate(3, email = $$props.email);
		if ("phone" in $$props) $$invalidate(4, phone = $$props.phone);
	};

	$$self.$capture_state = () => ({ name, avatarSrc, job, email, phone });

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("avatarSrc" in $$props) $$invalidate(1, avatarSrc = $$props.avatarSrc);
		if ("job" in $$props) $$invalidate(2, job = $$props.job);
		if ("email" in $$props) $$invalidate(3, email = $$props.email);
		if ("phone" in $$props) $$invalidate(4, phone = $$props.phone);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, avatarSrc, job, email, phone];
}

class Contact_card extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			name: 0,
			avatarSrc: 1,
			job: 2,
			email: 3,
			phone: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Contact_card",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Contact_card> was created without expected prop 'name'");
		}

		if (/*avatarSrc*/ ctx[1] === undefined && !("avatarSrc" in props)) {
			console.warn("<Contact_card> was created without expected prop 'avatarSrc'");
		}

		if (/*job*/ ctx[2] === undefined && !("job" in props)) {
			console.warn("<Contact_card> was created without expected prop 'job'");
		}

		if (/*email*/ ctx[3] === undefined && !("email" in props)) {
			console.warn("<Contact_card> was created without expected prop 'email'");
		}

		if (/*phone*/ ctx[4] === undefined && !("phone" in props)) {
			console.warn("<Contact_card> was created without expected prop 'phone'");
		}
	}

	get name() {
		throw new Error("<Contact_card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Contact_card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get avatarSrc() {
		throw new Error("<Contact_card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set avatarSrc(value) {
		throw new Error("<Contact_card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get job() {
		throw new Error("<Contact_card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set job(value) {
		throw new Error("<Contact_card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get email() {
		throw new Error("<Contact_card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set email(value) {
		throw new Error("<Contact_card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get phone() {
		throw new Error("<Contact_card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set phone(value) {
		throw new Error("<Contact_card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/feature-toggle.svelte generated by Svelte v3.32.1 */

// (5:0) {#if $featureTogglesStore[name]}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(5:0) {#if $featureTogglesStore[name]}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$featureTogglesStore*/ ctx[1][/*name*/ ctx[0]] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*$featureTogglesStore*/ ctx[1][/*name*/ ctx[0]]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$featureTogglesStore, name*/ 3) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $featureTogglesStore;
	validate_store(featureTogglesStore, "featureTogglesStore");
	component_subscribe($$self, featureTogglesStore, $$value => $$invalidate(1, $featureTogglesStore = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Feature_toggle", slots, ['default']);
	let { name } = $$props;
	const writable_props = ["name"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Feature_toggle> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		featureTogglesStore,
		name,
		$featureTogglesStore
	});

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, $featureTogglesStore, $$scope, slots];
}

class Feature_toggle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { name: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Feature_toggle",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Feature_toggle> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Feature_toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Feature_toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/about.svelte generated by Svelte v3.32.1 */
const file$1 = "src/routes/about.svelte";

// (25:0) <FeatureToggle name={FEATURE_TOGGLES.vipWelcome.name}>
function create_default_slot(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Some people see this, others don't!");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Some people see this, others don't!");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$1, 25, 2, 655);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(25:0) <FeatureToggle name={FEATURE_TOGGLES.vipWelcome.name}>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let contactcard;
	let t0;
	let t1;
	let h1;
	let t2;
	let t3;
	let p;
	let t4;
	let t5;
	let featuretoggle;
	let current;
	const contactcard_spread_levels = [/*erinLindford*/ ctx[0]];
	let contactcard_props = {};

	for (let i = 0; i < contactcard_spread_levels.length; i += 1) {
		contactcard_props = assign(contactcard_props, contactcard_spread_levels[i]);
	}

	contactcard = new Contact_card({ props: contactcard_props, $$inline: true });

	featuretoggle = new Feature_toggle({
			props: {
				name: FEATURE_TOGGLES.vipWelcome.name,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(contactcard.$$.fragment);
			t0 = space();
			t1 = space();
			h1 = element("h1");
			t2 = text("About this site");
			t3 = space();
			p = element("p");
			t4 = text("This is the 'about' page. There's not much here.");
			t5 = space();
			create_component(featuretoggle.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(contactcard.$$.fragment, nodes);
			t0 = claim_space(nodes);
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document.head);
			head_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, "About this site");
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t4 = claim_text(p_nodes, "This is the 'about' page. There's not much here.");
			p_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			claim_component(featuretoggle.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			add_location(h1, file$1, 20, 0, 515);
			add_location(p, file$1, 22, 0, 541);
		},
		m: function mount(target, anchor) {
			mount_component(contactcard, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t4);
			insert_dev(target, t5, anchor);
			mount_component(featuretoggle, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const contactcard_changes = (dirty & /*erinLindford*/ 1)
			? get_spread_update(contactcard_spread_levels, [get_spread_object(/*erinLindford*/ ctx[0])])
			: {};

			contactcard.$set(contactcard_changes);
			const featuretoggle_changes = {};

			if (dirty & /*$$scope*/ 2) {
				featuretoggle_changes.$$scope = { dirty, ctx };
			}

			featuretoggle.$set(featuretoggle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contactcard.$$.fragment, local);
			transition_in(featuretoggle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contactcard.$$.fragment, local);
			transition_out(featuretoggle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(contactcard, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t5);
			destroy_component(featuretoggle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("About", slots, []);

	const erinLindford = {
		name: "Erin Lindford",
		avatarSrc: "https://randomuser.me/api/portraits/women/17.jpg",
		job: "Customer Support",
		email: " erinlindford@example.com ",
		phone: "(555) 765-4321"
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		ContactCard: Contact_card,
		FeatureToggle: Feature_toggle,
		FEATURE_TOGGLES,
		erinLindford
	});

	return [erinLindford];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment$2.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQuNWEyNTYyMTcuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbnRhY3QtY2FyZC5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9mZWF0dXJlLXRvZ2dsZS5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL2Fib3V0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBleHBvcnQgbGV0IG5hbWU7XG4gIGV4cG9ydCBsZXQgYXZhdGFyU3JjO1xuICBleHBvcnQgbGV0IGpvYjtcbiAgZXhwb3J0IGxldCBlbWFpbDtcbiAgZXhwb3J0IGxldCBwaG9uZTtcbjwvc2NyaXB0PlxuPGRpdiBjbGFzcz1cIm1kOmZsZXggYmctd2hpdGUgcm91bmRlZC1sZyBwLTZcIj5cbiAgPGltZyBjbGFzcz1cImgtMTYgdy0xNiBtZDpoLTI0IG1kOnctMjQgcm91bmRlZC1mdWxsIG14LWF1dG8gbWQ6bXgtMCBtZDptci02XCIgc3JjPXthdmF0YXJTcmN9IGFsdD1cIkF2YXRhclwiPlxuICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgbWQ6dGV4dC1sZWZ0XCI+XG4gICAgPGgyIGNsYXNzPVwidGV4dC1sZ1wiPntuYW1lfTwvaDI+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtcHVycGxlLTUwMFwiPntqb2J9PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtZ3JheS02MDBcIj57ZW1haWx9PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtZ3JheS02MDBcIj57cGhvbmV9PC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+IiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgZmVhdHVyZVRvZ2dsZXNTdG9yZSB9IGZyb20gXCIuLi9mZWF0dXJlLXRvZ2dsZXMvc3RvcmVcIjtcbiAgZXhwb3J0IGxldCBuYW1lO1xuPC9zY3JpcHQ+XG57I2lmICRmZWF0dXJlVG9nZ2xlc1N0b3JlW25hbWVdfVxuICA8c2xvdCAvPlxuey9pZn1cblxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IENvbnRhY3RDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRhY3QtY2FyZC5zdmVsdGVcIjtcbiAgaW1wb3J0IEZlYXR1cmVUb2dnbGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvZmVhdHVyZS10b2dnbGUuc3ZlbHRlXCI7XG4gIGltcG9ydCB7IEZFQVRVUkVfVE9HR0xFUyB9IGZyb20gXCIuLi9mZWF0dXJlLXRvZ2dsZXNcIjtcblxuICBjb25zdCBlcmluTGluZGZvcmQgPSB7XG4gICAgbmFtZTogXCJFcmluIExpbmRmb3JkXCIsXG4gICAgYXZhdGFyU3JjOiBcImh0dHBzOi8vcmFuZG9tdXNlci5tZS9hcGkvcG9ydHJhaXRzL3dvbWVuLzE3LmpwZ1wiLFxuICAgIGpvYjogXCJDdXN0b21lciBTdXBwb3J0XCIsXG4gICAgZW1haWw6IFwiIGVyaW5saW5kZm9yZEBleGFtcGxlLmNvbSBcIixcbiAgICBwaG9uZTogXCIoNTU1KSA3NjUtNDMyMVwiXG4gIH1cbjwvc2NyaXB0PlxuXG48Q29udGFjdENhcmQgey4uLmVyaW5MaW5kZm9yZH0gLz5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+QWJvdXQ8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGgxPkFib3V0IHRoaXMgc2l0ZTwvaDE+XG5cbjxwPlRoaXMgaXMgdGhlICdhYm91dCcgcGFnZS4gVGhlcmUncyBub3QgbXVjaCBoZXJlLjwvcD5cblxuPEZlYXR1cmVUb2dnbGUgbmFtZT17RkVBVFVSRV9UT0dHTEVTLnZpcFdlbGNvbWUubmFtZX0+XG4gIDxwPlNvbWUgcGVvcGxlIHNlZSB0aGlzLCBvdGhlcnMgZG9uJ3QhPC9wPlxuPC9GZWF0dXJlVG9nZ2xlPlxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkFVeUIsR0FBSTs7O3FCQUNLLEdBQUc7Ozt1QkFDTCxHQUFLOzs7dUJBQ0wsR0FBSzs7Ozs7Ozs7Ozs7O3NDQUhaLEdBQUk7Ozs7O3VDQUNLLEdBQUc7Ozs7O3lDQUNMLEdBQUs7Ozs7O3lDQUNMLEdBQUs7Ozs7Ozs7O2tEQUw4QyxHQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZFQUFULEdBQVM7Ozs7cURBRW5FLEdBQUk7bURBQ0ssR0FBRzt1REFDTCxHQUFLO3dEQUNMLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BWnhCLElBQUk7T0FDSixTQUFTO09BQ1QsR0FBRztPQUNILEtBQUs7T0FDTCxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0NEYixHQUFvQixhQUFDLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQUF6QixHQUFvQixhQUFDLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FGakIsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FEQ1lBLEdBQVk7Ozs7Ozs7Ozs7O1VBVVIsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0ZBVm5DLEdBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BVHJCLFlBQVk7RUFDaEIsSUFBSSxFQUFFLGVBQWU7RUFDckIsU0FBUyxFQUFFLGtEQUFrRDtFQUM3RCxHQUFHLEVBQUUsa0JBQWtCO0VBQ3ZCLEtBQUssRUFBRSw0QkFBNEI7RUFDbkMsS0FBSyxFQUFFLGdCQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
